?RCS: $Id$
?RCS:
?RCS: Copyright (c) 1999 Jarkko Hietaniemi
?RCS:
?RCS: You may distribute under the terms of either the GNU General Public
?RCS: License or the Artistic License, as specified in the README file.
?RCS:
?MAKE:d_statfs_f_flags: \
	Hasfield i_sysparam i_sysmount i_systypes \
	i_sysvfs i_sysstatfs Setvar d_statfs_s
?MAKE:	-pick add $@ %<
?S:d_statfs_f_flags:
?S:	This variable conditionally defines the HAS_STRUCT_STATFS_F_FLAGS
?S:	symbol, which indicates to struct statfs from has f_flags member.
?S:	This kind of struct statfs is coming from sys/mount.h (BSD),
?S:	not from sys/statfs.h (SYSV).
?S:.
?C:HAS_STRUCT_STATFS_F_FLAGS:
?C:	This symbol, if defined, indicates that the struct statfs
?C:	does have the f_flags member containing the mount flags of
?C:	the filesystem containing the file.
?C:	This kind of struct statfs is coming from <sys/mount.h> (BSD 4.3),
?C:	not from <sys/statfs.h> (SYSV).  Older BSDs do not have statfs() and
?C:	struct statfs, they have ustat() and getmnt() with struct ustat and
?C:	struct fs_data.
?C:.
?H:#$d_statfs_f_flags HAS_STRUCT_STATFS_F_FLAGS		/**/
?H:.
?LINT:set d_statfs_f_flags
: see if struct statfs knows about f_flags
case "$d_statfs_s" in
define)
	echo " "
	echo "Checking to see if your struct statfs has f_flags field..." >&4
	set d_statfs_f_flags statfs f_flags $i_systypes sys/types.h $i_sysparam sys/param.h $i_sysmount sys/mount.h $i_sysvfs sys/vfs.h $i_sysstatfs sys/statfs.h
	eval $hasfield
	;;
*)	val="$undef"
	set d_statfs_f_flags
	eval $setvar
	;;
esac
case "$d_statfs_f_flags" in
"$define")      echo "Yes, it does."   ;;
*)              echo "No, it doesn't." ;;
esac

